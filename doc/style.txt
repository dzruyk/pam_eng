Правила оформления кода

стиль оформления стуктур и управляющих операторов -- K&R.

typedef:
1. не использовать typedef для переопределения структур и перечислений.
2. перед именами структур писать struct, т.е.:
	struct structname var;
3. если переменная, аргумент функции или элемент структуры должены принимать
значения из перечисления то они должны определяться как "enum enumname varname"
(а не int).

#define:
1. Все константы объявляются заглавными буквами.
2. При использовании в комбинации с #ifndef для защиты от множественного
включения имя определения выделяется двумя прочерками в начале и в конце:
	#ifndef __SOURCENAME_H__
	#define __SOURCENAME_H__

имена структур:
1. В именах структур не должны использоваться заглавные буквы.
2. Перед именем каждой структуры, которая видима за пределами своего файла
должен стоять префикс pe_, т.е.:
	struct pe_structname {
		something;
	};
3. Нижний прочерк может использоваться в имени структуры только после префикса.

имена функций:
1. В именах функций не должны использоваться заглавные буквы.
2. Перед именем каждой функции, которая видима за пределами своего файла должен
стоять префикс pe_, т.е.:
	int pe_funcname (something)
	{
		something
	}
3. Если функция выполняет какое либо действие над определенной структурой
(которую она принимает как аргумент), то имя функции должно включать в себя
сокращенное имя данной структуры.
	int pe_mat3mult(struct pe_mat3 *m)
	{
		something
	}
4. Нижний прочерк может использоваться в имени функции только после префикса.
В случаях, когда имя получается трудночитаемым, допускается также использовать
нижний прочерк после сокращенного имени структуры, содержащегося в функции:
	int pe_example_verylongfunctionname(struct pe_example *e)
	{
		something
	}
5. Имя возращаемого типа данных функции должно быть на отдельной строке в
прототипе и на одной строке в самом определении.
в .h файле:
	int
	pe_funcname(something);
в .c файле:
	int pe_funcname(something)
	{
		something
	}
